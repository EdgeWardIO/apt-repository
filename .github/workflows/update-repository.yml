name: Update APT Repository

on:
  repository_dispatch:
    types: [update-apt-repo]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to process'
        required: true
        type: string

jobs:
  update-repository:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Import GPG key
      if: ${{ secrets.APT_GPG_PRIVATE_KEY }}
      run: |
        echo "${{ secrets.APT_GPG_PRIVATE_KEY }}" | gpg --batch --import
        echo "GPG key imported successfully"

    - name: Download release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ github.event.client_payload.release_tag || github.event.inputs.release_tag }}
      run: |
        echo "Downloading assets for release: $RELEASE_TAG"
        
        # Create packages directory
        mkdir -p packages
        
        # Download .deb files from EdgeMetrics releases
        gh release download "$RELEASE_TAG" \
          --repo "EdgeWardIO/EdgeMetrics" \
          --pattern "*.deb" \
          --dir ./packages || echo "No .deb files found in release"
        
        # List downloaded files
        ls -la packages/ || echo "No packages downloaded"

    - name: Update repository
      run: |
        echo "Updating APT repository structure..."
        
        # Copy new packages to pool (if any exist)
        if ls packages/*.deb 1> /dev/null 2>&1; then
          echo "Adding packages to repository..."
          cp packages/*.deb pool/main/
        else
          echo "No .deb packages found - repository will remain empty until packages are available"
        fi
        
        # Generate Packages files for each architecture
        for arch in amd64 arm64 armhf; do
          echo "Generating Packages file for $arch..."
          
          # Create architecture-specific packages file
          dpkg-scanpackages pool/main /dev/null | \
            grep -E "(Package|Version|Architecture|Maintainer|Depends|Description|Filename|Size|MD5sum|SHA1|SHA256)" | \
            awk -v target_arch="$arch" '
              /^Package:/ { pkg=$0; getline; 
                while($0 !~ /^$/ && $0 !~ /^Package:/) {
                  if($0 ~ /^Architecture:/) {
                    if($2 == target_arch || $2 == "all") {
                      print pkg; print $0;
                      while(getline && $0 !~ /^$/ && $0 !~ /^Package:/) print;
                      if($0 ~ /^Package:/) pkg=$0; else print "";
                    } else {
                      while(getline && $0 !~ /^$/ && $0 !~ /^Package:/) {}
                      if($0 ~ /^Package:/) pkg=$0;
                    }
                  } else getline;
                }
              }
            ' > "dists/stable/main/binary-${arch}/Packages" || touch "dists/stable/main/binary-${arch}/Packages"
          
          # Compress Packages file
          gzip -c "dists/stable/main/binary-${arch}/Packages" > "dists/stable/main/binary-${arch}/Packages.gz"
        done
        
        # Generate Release file
        cat > dists/stable/Release <<RELEOF
        Origin: EdgeMetrics
        Label: EdgeMetrics
        Suite: stable
        Codename: stable
        Version: 1.0
        Architectures: amd64 arm64 armhf
        Components: main
        Description: EdgeMetrics APT Repository - ML model performance analyzer for edge devices
        Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')
        RELEOF
        
        # Add checksums
        echo "MD5Sum:" >> dists/stable/Release
        find dists/stable -name "Packages*" -exec md5sum {} \; | sed 's|dists/stable/||' >> dists/stable/Release
        
        echo "SHA1:" >> dists/stable/Release
        find dists/stable -name "Packages*" -exec sha1sum {} \; | sed 's|dists/stable/||' >> dists/stable/Release
        
        echo "SHA256:" >> dists/stable/Release
        find dists/stable -name "Packages*" -exec sha256sum {} \; | sed 's|dists/stable/||' >> dists/stable/Release

    - name: Sign Release file
      if: ${{ secrets.APT_GPG_PRIVATE_KEY }}
      run: |
        echo "Signing Release file..."
        gpg --default-key apt@edgemetrics.app --armor --detach-sign --output dists/stable/Release.gpg dists/stable/Release
        gpg --default-key apt@edgemetrics.app --armor --detach-sign --clearsign --output dists/stable/InRelease dists/stable/Release

    - name: Commit and push changes
      run: |
        git config user.name "APT Repository Bot"
        git config user.email "apt@edgemetrics.app"
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update repository with release ${RELEASE_TAG:-latest}"
          git push
          echo "Repository updated successfully"
        fi
